// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, LogFileStreamer, spawn,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  spawn = require('child_process').spawn;

  LogFileStreamer = (function(_super) {

    __extends(LogFileStreamer, _super);

    function LogFileStreamer(filename) {
      this._handleDataReceived = __bind(this._handleDataReceived, this);
      this.filename = filename;
      this.buffer = '';
    }

    LogFileStreamer.prototype.start = function() {
      this.tail = spawn('tail', ['-f', this.filename]);
      return this.tail.stdout.on('data', this._handleDataReceived);
    };

    LogFileStreamer.prototype.stop = function() {
      var _ref;
      return (_ref = this.tail) != null ? _ref.kill() : void 0;
    };

    LogFileStreamer.prototype._handleDataReceived = function(data) {
      var line, lines, _i, _len, _results;
      data = data.toString('utf8');
      this.buffer += data;
      this.emit('data', data);
      lines = this.buffer.split("\n");
      this.buffer = lines.pop();
      _results = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        _results.push(this.emit("line", line));
      }
      return _results;
    };

    return LogFileStreamer;

  })(EventEmitter);

  module.exports = LogFileStreamer;

}).call(this);
