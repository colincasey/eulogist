// Generated by CoffeeScript 1.3.3
(function() {
  var LogFileStreamer, fs, path;

  LogFileStreamer = require('../src/logFileStreamer');

  fs = require('fs');

  path = require('path');

  describe('logFileStreamer', function() {
    var logFileStreamer, testFile, testFilepath;
    testFilepath = null;
    testFile = null;
    logFileStreamer = null;
    beforeEach(function() {
      testFilepath = path.join(__dirname, 'logFileStreamer.test');
      testFile = fs.createWriteStream(testFilepath);
      logFileStreamer = new LogFileStreamer(testFilepath);
      return logFileStreamer.start();
    });
    afterEach(function() {
      logFileStreamer.stop();
      testFile.destroy();
      return fs.unlinkSync(testFilepath);
    });
    it('should fire data event whenever new content is written to file', function(done) {
      logFileStreamer.once('data', function(data) {
        data.should.equal("1");
        testFile.write("2");
        return logFileStreamer.once('data', function(data) {
          data.should.equal("2");
          return done();
        });
      });
      return testFile.write("1");
    });
    it('should fire line event whenever a new line is encountered', function(done) {
      var content;
      content = '';
      logFileStreamer.once('data', function(data) {
        testFile.write("2");
        return logFileStreamer.once('data', function(data) {
          return testFile.write("3\n");
        });
      });
      logFileStreamer.on('line', function(line) {
        line.should.equal("123");
        return done();
      });
      return testFile.write("1");
    });
    it('should fire a line event if multiple lines are encountered', function(done) {
      var content, expectedLines, receivedLines;
      expectedLines = 3;
      receivedLines = 0;
      content = '';
      logFileStreamer.on('line', function(line) {
        receivedLines += 1;
        content += line;
        if (receivedLines === 3) {
          content.should.equal("123");
          return done();
        }
      });
      return testFile.write("1\n2\n3\n");
    });
    return it('should not fire line events for incomplete lines', function(done) {
      logFileStreamer.once('data', function(data) {
        data.should.equal("1");
        return testFile.write("2\n3");
      });
      logFileStreamer.on('line', function(line) {
        line.should.equal("12");
        return done();
      });
      return testFile.write("1");
    });
  });

}).call(this);
