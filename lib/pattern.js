// Generated by CoffeeScript 1.3.3
(function() {
  var Pattern, dateFormatReplacements, namedDateFormatToFormat, patternDefaults;

  module.exports = Pattern = (function() {

    function Pattern(opts) {
      var defaults, key, value;
      if (opts == null) {
        opts = {};
      }
      defaults = patternDefaults[opts.conversionCharacter] || {};
      for (key in defaults) {
        value = defaults[key];
        this[key] = value;
      }
      for (key in opts) {
        value = opts[key];
        if (value != null) {
          this[key] = value;
        }
      }
    }

    Pattern.prototype.scan = function(scanner) {
      var matcher;
      matcher = this.getMatcher();
      if (scanner.scan(matcher)) {
        return scanner.getCapture(1).trim();
      } else {
        return null;
      }
    };

    Pattern.prototype.getMatcher = function() {
      var customMatcher;
      if (this._matcher == null) {
        customMatcher = "create" + (this.name.charAt(0).toUpperCase()) + (this.name.substring(1)) + "Matcher";
        if (this[customMatcher] != null) {
          this._matcher = this[customMatcher]();
        }
        this._matcher = this._matcher || this.createDefaultMatcher();
      }
      return this._matcher;
    };

    Pattern.prototype.createDefaultMatcher = function() {
      var contents;
      if (this.truncate != null) {
        contents = '.{' + ("" + this.truncate) + '}';
      } else if (this.padding != null) {
        contents = '.{' + ("" + (Math.abs(this.padding))) + '}';
      } else {
        contents = "[^\\s]+";
      }
      return RegExp("(" + contents + ")" + (this.separator || ''));
    };

    return Pattern;

  })();

  patternDefaults = {
    'c': {
      name: 'category',
      createCategoryMatcher: function() {
        var categories, i, precision;
        if (this.format == null) {
          return;
        }
        precision = parseInt(this.format, 10);
        if (isNaN(precision)) {
          return;
        }
        categories = (function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = precision - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push("[^.]+");
          }
          return _results;
        })();
        return RegExp("(" + (categories.join("\\.")) + ")" + (this.separator || ''));
      }
    },
    'd': {
      name: 'date',
      format: 'ISO8601',
      createDateMatcher: function() {
        var dateMatcher, match, replacement;
        dateMatcher = namedDateFormatToFormat[this.format] || this.format;
        for (match in dateFormatReplacements) {
          replacement = dateFormatReplacements[match];
          dateMatcher = dateMatcher.replace(match, replacement);
        }
        return RegExp("(" + dateMatcher + ")" + (this.separator || ''));
      }
    },
    'p': {
      name: 'priority'
    },
    'M': {
      name: 'method'
    },
    'L': {
      name: 'lineNumber'
    },
    'x': {
      name: 'nestedDiagnosticContext'
    },
    'm': {
      name: 'message',
      createMessageMatcher: function() {
        return /([^\r\n]*)/;
      }
    },
    'n': {
      name: 'lineSeparator',
      createLineSeparatorMatcher: function() {
        return /(\n|\r\n)/;
      }
    }
  };

  namedDateFormatToFormat = {
    'ISO8601': 'yyyy-MM-dd HH:mm:ss,SSS'
  };

  dateFormatReplacements = {
    'yyyy': "\\d{4}",
    'mm': "\\d{2}",
    'MM': "\\d{2}",
    'dd': "\\d{2}",
    'HH': "\\d{2}",
    'ss': "\\d{2}",
    'SSS': "\\d{3}"
  };

}).call(this);
