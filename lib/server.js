// Generated by CoffeeScript 1.3.3
(function() {
  var Log, NotFound, appname, author, config, connect, express, io, nap, server;

  appname = "Eulogist";

  author = "Colin Casey";

  connect = require('connect');

  express = require('express');

  io = require('socket.io');

  config = require('nconf');

  nap = require('nap');

  Log = require('./log');

  config.argv().env();

  config.file({
    file: 'config.json'
  });

  config.defaults({
    http: {
      port: 4321
    },
    logs: []
  });

  server = express.createServer();

  server.configure(function() {
    server.set('views', __dirname + '/../views');
    server.set('view options', {
      layout: false
    });
    server.use(connect.bodyParser());
    server.use(express.cookieParser());
    server.use(express.session({
      secret: 'ajei583mfy39kf8nfdkfif3'
    }));
    server.use(connect["static"](__dirname + '/../web'));
    return server.use(server.router);
  });

  server.error(function(err, req, res, next) {
    if (err instanceof NotFound) {
      return res.render('404.jade', {
        locals: {
          title: "" + appname + ": 404 - Not Found",
          description: '',
          author: author
        },
        status: 404
      });
    } else {
      return res.render('500.jade', {
        locals: {
          title: "" + appname + ": Error",
          description: '',
          author: author,
          error: err
        },
        status: 500
      });
    }
  });

  server.listen(config.get('http:port'));

  io = io.listen(server);

  io.sockets.on('connection', function(socket) {
    console.log('client connected');
    socket.on('message', function(data) {
      socket.broadcast.emit('server_message', data);
      return socket.emit('server_message', data);
    });
    return socket.on('disconnect', function() {
      return console.log('client disconnected');
    });
  });

  server.get('/', function(req, res) {
    return res.render('index.jade', {
      locals: {
        title: appname,
        description: '',
        author: author
      }
    });
  });

  server.get('/500', function(req, res) {
    throw new Error('This is a 500 error');
  });

  server.get('/*', function(req, res) {
    throw new NotFound;
  });

  NotFound = function(msg) {
    this.name = 'NotFound';
    Error.call(this, msg);
    return Error.captureStackTrace(this, arguments.callee);
  };

  console.log('Listening on http://localhost:' + config.get('http:port'));

}).call(this);
