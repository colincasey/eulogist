// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, LocalLogStream, LogStream, RemoteLogStream, pty, spawn,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  spawn = require('child_process').spawn;

  pty = require('pty.js');

  LogStream = (function(_super) {

    __extends(LogStream, _super);

    function LogStream(file, opts) {
      if (opts == null) {
        opts = {};
      }
      this._handleDataReceived = __bind(this._handleDataReceived, this);

      this.file = file;
      this.opts = opts;
    }

    LogStream.prototype.start = function() {
      throw new Error('must be implemented in subclass');
    };

    LogStream.prototype.stop = function() {
      throw new Error('must be implemented in subclass');
    };

    LogStream.prototype._handleDataReceived = function(data) {
      return this.emit('data', data.toString('utf8'));
    };

    return LogStream;

  })(EventEmitter);

  LocalLogStream = (function(_super) {

    __extends(LocalLogStream, _super);

    function LocalLogStream() {
      return LocalLogStream.__super__.constructor.apply(this, arguments);
    }

    LocalLogStream.prototype.start = function() {
      this.tail = spawn('tail', ['-f', this.file]);
      this.tail.stdout.on('data', this._handleDataReceived);
      return this.emit('open');
    };

    LocalLogStream.prototype.stop = function() {
      var _ref;
      if ((_ref = this.tail) != null) {
        _ref.kill();
      }
      return this.emit('close');
    };

    return LocalLogStream;

  })(LogStream);

  RemoteLogStream = (function(_super) {

    __extends(RemoteLogStream, _super);

    function RemoteLogStream(file, opts) {
      if (opts == null) {
        opts = {};
      }
      this._onConnected = __bind(this._onConnected, this);

      this._onAuthenticating = __bind(this._onAuthenticating, this);

      this._onInitializing = __bind(this._onInitializing, this);

      this._onDisconnected = __bind(this._onDisconnected, this);

      this._handleTerminalDataReceived = __bind(this._handleTerminalDataReceived, this);

      RemoteLogStream.__super__.constructor.call(this, file, opts);
      this.host = opts.host;
      this.session = 'disconnected';
    }

    RemoteLogStream.prototype.start = function() {
      this.term = pty.spawn('bash', [], {
        name: 'xterm',
        cwd: process.env.HOME,
        env: process.env
      });
      this.term.on('data', this._handleTerminalDataReceived);
      return this.emit('start');
    };

    RemoteLogStream.prototype.stop = function() {
      this.term.destroy();
      this.session = 'disconnected';
      return this.emit('close');
    };

    RemoteLogStream.prototype._handleTerminalDataReceived = function(data) {
      var delegate;
      data = data.toString('utf8');
      delegate = "_on" + (this.session.charAt(0).toUpperCase()) + (this.session.substring(1));
      if (this[delegate]) {
        return this[delegate](data);
      } else {
        throw 'Not sure how to handle state ' + this.session;
      }
    };

    RemoteLogStream.prototype._onDisconnected = function(data) {
      if (/\$$/.test(data.toString().trim())) {
        console.log("connecting to " + this.opts.host + "...");
        this.session = 'initializing';
        return this.term.write("ssh " + this.opts.host + "\r");
      }
    };

    RemoteLogStream.prototype._onInitializing = function(data) {
      var _this = this;
      if (/^Password:/.test(data)) {
        return this.emit('passwordRequested', function(password) {
          _this.session = 'authenticating';
          console.log('authenticating...');
          return _this.term.write("" + password + "\r");
        });
      }
    };

    RemoteLogStream.prototype._onAuthenticating = function(data) {
      if (/\$$/.test(data.trim())) {
        this.session = 'connected';
        console.log('connected');
        return this.term.write("tail -f \"" + this.file + "\"\r");
      }
    };

    RemoteLogStream.prototype._onConnected = function(data) {
      return this._handleDataReceived(data);
    };

    return RemoteLogStream;

  })(LogStream);

  module.exports = function(file, opts) {
    if (opts == null) {
      opts = {};
    }
    return new (opts.host != null ? RemoteLogStream : LocalLogStream)(file, opts);
  };

}).call(this);
