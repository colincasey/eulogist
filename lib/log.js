// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, Interpreter, Log, LogStream, requiredArgs,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Interpreter = require('./interpreter');

  LogStream = require('./logStream');

  EventEmitter = require('events').EventEmitter;

  requiredArgs = ['name', 'file', 'format'];

  module.exports = Log = (function(_super) {

    __extends(Log, _super);

    function Log(opts) {
      var log, requiredArg, _i, _len;
      if (opts == null) {
        opts = {};
      }
      this._onLog = __bind(this._onLog, this);

      for (_i = 0, _len = requiredArgs.length; _i < _len; _i++) {
        requiredArg = requiredArgs[_i];
        if (opts[requiredArg] == null) {
          throw new Error("'" + requiredArg + "' is required");
        }
      }
      this.opts = opts;
      this.name = opts.name;
      this.stream = new LogStream(this.opts.file, this.opts);
      this.interpreter = new Interpreter(this.stream, this.opts.format);
      log = this;
      this.interpreter.on('log', this._onLog);
    }

    Log.prototype._onLog = function(logData) {
      return this.emit('log', logData);
    };

    Log.prototype.open = function() {
      return this.stream.start();
    };

    Log.prototype.close = function() {
      return this.stream.stop();
    };

    return Log;

  })(EventEmitter);

}).call(this);
